pipeline {
  agent any

  /***** TOOLS *****/
  tools {
    maven 'maven'                 // Jenkins -> Tools: Maven installation name
  }

  /***** SETTINGS YOU MAY EDIT *****/
  environment {
    // Git repo to build (your fork of spring-petclinic)
    GIT_URL        = 'https://github.com/<your-username>/spring-petclinic.git'
    GIT_BRANCH     = 'main'

    // Image/registry
    IMAGE_NAME     = 'my-app-image'
    IMAGE_TAG      = 'latest'
    ACR_NAME       = 'ravi5291'                    // az acr create --name <this>
    ACR_LOGIN      = "ravi5291.azurecr.io"

    // Azure AKS target
    AZ_RESOURCE_GRP = 'demo11'
    AKS_CLUSTER     = 'ravi-aks-cluster11'

    // SonarCloud
    SONAR_ORG       = 'ravi-on-cloud'
    SONAR_PROJECT   = 'ravi-on-cloud_jenkins'
  }

  stages {

    stage('Checkout From Git') {
      steps {
        git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
      }
    }

    stage('Maven Validate') { steps { sh 'mvn -B validate' } }
    stage('Maven Compile')  { steps { sh 'mvn -B compile'  } }
    stage('Maven Test')     { steps { sh 'mvn -B test'     } }
    stage('Maven Package')  { steps { sh 'mvn -B package'  } }

    stage('SonarCloud Analysis (Scanner)') {
      environment { SCANNER_HOME = tool 'sonar-scanner' }  // Jenkins -> Tools
      steps {
        withSonarQubeEnv('sonarserver') {                  // Jenkins -> System
          sh """
            \$SCANNER_HOME/bin/sonar-scanner \
              -Dsonar.organization=${SONAR_ORG} \
              -Dsonar.projectName=jenkins \
              -Dsonar.projectKey=${SONAR_PROJECT} \
              -Dsonar.sources=src \
              -Dsonar.java.binaries=target/classes \
              -Dsonar.host.url=https://sonarcloud.io
          """
        }
      }
    }

    stage('Publish Sonar Report (Maven)') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          sh """
            mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=${SONAR_PROJECT} \
              -Dsonar.organization=${SONAR_ORG} \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=\$SONAR_TOKEN \
              -Dsonar.qualitygate.wait=false
          """
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh """
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
          docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ACR_LOGIN}/${IMAGE_NAME}:${IMAGE_TAG}
        """
      }
    }

    stage('Trivy Scan') {
      steps {
        sh """
          trivy image --format table --severity HIGH,CRITICAL \
            --output trivy-report.txt ${ACR_LOGIN}/${IMAGE_NAME}:${IMAGE_TAG} || true
        """
      }
      post { always { archiveArtifacts artifacts: 'trivy-report.txt', fingerprint: true } }
    }

    stage('Login to ACR & Push Image') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'azure-sp', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD'),
          string(credentialsId: 'azure-tenant', variable: 'TENANT_ID')
        ]) {
          sh """
            az login --service-principal -u "\$AZURE_USERNAME" -p "\$AZURE_PASSWORD" --tenant "\$TENANT_ID"
            az acr login --name ${ACR_NAME}
            docker push ${ACR_LOGIN}/${IMAGE_NAME}:${IMAGE_TAG}
          """
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        sh """
          az aks get-credentials --resource-group ${AZ_RESOURCE_GRP} --name ${AKS_CLUSTER} --overwrite-existing
          kubectl apply -f k8s/petclinic.yml
          kubectl get all -l app=luckywebapp
        """
      }
    }
  }
}
